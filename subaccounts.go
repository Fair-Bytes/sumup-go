// Code generated by `gocodegen`. DO NOT EDIT.

package sumup

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"net/http"
)

// Subaccount is the type definition for a Subaccount.
type Subaccount struct {
	// Creation date of the operator
	CreatedAt *string `json:"created_at,omitempty"`
	Disabled  *bool   `json:"disabled,omitempty"`
	// ID of the sub-account
	Id *float64 `json:"id,omitempty"`
	// User permissions
	Permissions *Permissions `json:"permissions,omitempty"`
	// Username of the operator
	Username *string `json:"username,omitempty"`
}

// ListSubAccountsResponse is the type definition for a ListSubAccountsResponse.
type ListSubAccountsResponse []Subaccount

// CreateSubAccount request body.
type CreateSubAccountBody struct {
	// Password
	Password *string `json:"password,omitempty"`
	// Username of the new sub-account. Must be a valid email address.
	Username *string `json:"username,omitempty"`
}

// UpdateSubAccount request body.
type UpdateSubAccountBody struct {
	// Password
	Password *string `json:"password,omitempty"`
	// Username of the new sub-account. Must be a valid email address.
	Username *string `json:"username,omitempty"`
}

type SubaccountsService service

// List: List subaccounts

func (s *SubaccountsService) List(ctx context.Context) (*ListSubAccountsResponse, error) {
	path := fmt.Sprintf("/v0.1/me/accounts")

	req, err := s.client.NewRequest(ctx, http.MethodGet, path, http.NoBody)
	if err != nil {
		return nil, fmt.Errorf("error building request: %v", err)
	}

	resp, err := s.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode >= 500 {
		return nil, fmt.Errorf("invalid response: %d - %s", resp.StatusCode, http.StatusText(resp.StatusCode))
	}

	dec := json.NewDecoder(resp.Body)
	if resp.StatusCode >= 400 {
		var apiErr APIError
		if err := dec.Decode(&apiErr); err != nil {
			return nil, fmt.Errorf("read error response: %s", err.Error())
		}

		return nil, &apiErr
	}

	var v ListSubAccountsResponse
	if err := json.NewDecoder(resp.Body).Decode(&v); err != nil {
		return nil, fmt.Errorf("decode response: %s", err.Error())
	}

	return &v, nil
}

// CreateSubAccount: Create a subaccount

func (s *SubaccountsService) CreateSubAccount(ctx context.Context, body CreateSubAccountBody) (*Subaccount, error) {
	buf := new(bytes.Buffer)
	if err := json.NewEncoder(buf).Encode(body); err != nil {
		return nil, fmt.Errorf("encoding json body request failed: %v", err)
	}

	path := fmt.Sprintf("/v0.1/me/accounts")

	req, err := s.client.NewRequest(ctx, http.MethodPost, path, buf)
	if err != nil {
		return nil, fmt.Errorf("error building request: %v", err)
	}

	resp, err := s.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode >= 500 {
		return nil, fmt.Errorf("invalid response: %d - %s", resp.StatusCode, http.StatusText(resp.StatusCode))
	}

	dec := json.NewDecoder(resp.Body)
	if resp.StatusCode >= 400 {
		var apiErr APIError
		if err := dec.Decode(&apiErr); err != nil {
			return nil, fmt.Errorf("read error response: %s", err.Error())
		}

		return nil, &apiErr
	}

	var v Subaccount
	if err := json.NewDecoder(resp.Body).Decode(&v); err != nil {
		return nil, fmt.Errorf("decode response: %s", err.Error())
	}

	return &v, nil
}

// Deactivate: Deactivate a subaccount

func (s *SubaccountsService) Deactivate(ctx context.Context, operatorCode string) (*Subaccount, error) {
	path := fmt.Sprintf("/v0.1/me/accounts/%v", operatorCode)

	req, err := s.client.NewRequest(ctx, http.MethodDelete, path, http.NoBody)
	if err != nil {
		return nil, fmt.Errorf("error building request: %v", err)
	}

	resp, err := s.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode >= 500 {
		return nil, fmt.Errorf("invalid response: %d - %s", resp.StatusCode, http.StatusText(resp.StatusCode))
	}

	dec := json.NewDecoder(resp.Body)
	if resp.StatusCode >= 400 {
		var apiErr APIError
		if err := dec.Decode(&apiErr); err != nil {
			return nil, fmt.Errorf("read error response: %s", err.Error())
		}

		return nil, &apiErr
	}

	var v Subaccount
	if err := json.NewDecoder(resp.Body).Decode(&v); err != nil {
		return nil, fmt.Errorf("decode response: %s", err.Error())
	}

	return &v, nil
}

// Update: Update a subaccount

func (s *SubaccountsService) Update(ctx context.Context, operatorCode string, body UpdateSubAccountBody) (*Subaccount, error) {
	buf := new(bytes.Buffer)
	if err := json.NewEncoder(buf).Encode(body); err != nil {
		return nil, fmt.Errorf("encoding json body request failed: %v", err)
	}

	path := fmt.Sprintf("/v0.1/me/accounts/%v", operatorCode)

	req, err := s.client.NewRequest(ctx, http.MethodPut, path, buf)
	if err != nil {
		return nil, fmt.Errorf("error building request: %v", err)
	}

	resp, err := s.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode >= 500 {
		return nil, fmt.Errorf("invalid response: %d - %s", resp.StatusCode, http.StatusText(resp.StatusCode))
	}

	dec := json.NewDecoder(resp.Body)
	if resp.StatusCode >= 400 {
		var apiErr APIError
		if err := dec.Decode(&apiErr); err != nil {
			return nil, fmt.Errorf("read error response: %s", err.Error())
		}

		return nil, &apiErr
	}

	var v Subaccount
	if err := json.NewDecoder(resp.Body).Decode(&v); err != nil {
		return nil, fmt.Errorf("decode response: %s", err.Error())
	}

	return &v, nil
}
